name: Build all supported linux platforms

on:
  push:
    # branches:
    #   - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types:
      - opened
      - reopened
      - review_requested
  workflow_call: # Allows to run this workflow from another workflow
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        type: string
        required: true
      os:
        description: 'OS to build on, bash array style'
        type: string
        required: true

jobs:
  prepare-matrix-values:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          OS="${{ github.event.inputs.os }}"
          if [ -z "${OS}" ]; then
            OS="bionic focal jammy rocky8 rocky9 bullseye amazonlinux2 mariner2"
          fi
          MATRIX="["
          for os in $OS; do
            case $os in
              bionic)
                MATRIX="${MATRIX} {\"docker_image\": \"ubuntu:bionic\", \"pre_req_install_cmd\": \"apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git\"},"
                ;;
              focal)
                MATRIX="${MATRIX} {\"docker_image\": \"ubuntu:focal\", \"pre_req_install_cmd\": \"apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git\"},"
                ;;
              jammy)
                MATRIX="${MATRIX} {\"docker_image\": \"ubuntu:jammy\", \"pre_req_install_cmd\": \"apt-get update && apt-get install -y git\"},"
                ;;
              rocky8)
                MATRIX="${MATRIX} {\"docker_image\": \"rockylinux:8\", \"pre_req_install_cmd\": \"dnf install -y git\"},"
                ;;
              rocky9)
                MATRIX="${MATRIX} {\"docker_image\": \"rockylinux:9\", \"pre_req_install_cmd\": \"dnf install -y git\"},"
                ;;
              bullseye)
                MATRIX="${MATRIX} {\"docker_image\": \"debian:bullseye\", \"pre_req_install_cmd\": \"apt-get update && apt-get install -y git\"},"
                ;;
              amazonlinux2)
                MATRIX="${MATRIX} {\"docker_image\": \"amazonlinux:2\", \"pre_req_install_cmd\": \"yum update && yum install -y git\"},"
                ;;
              mariner2)
                MATRIX="${MATRIX} {\"docker_image\": \"mcr.microsoft.com/cbl-mariner/base/core:2.0\", \"pre_req_install_cmd\": \"tdnf install --noplugins --skipsignature -y ca-certificates git\"},"
                ;;
              *)
                echo "Unknown OS: $os"
                exit 1
                ;;
            esac
          done
          MATRIX="${MATRIX%?}]"
          echo "::set-output name=matrix::${MATRIX}"
  build-linux-matrix:
    runs-on: ubuntu-latest
    needs: prepare-matrix-values
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare-matrix-values.outputs.matrix)}}
    container:
      image: ${{ matrix.docker_image.image }}
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - name: Install git
        run: ${{ matrix.docker_image.pre_req_install_cmd }}
      - name: Checkout
        if: matrix.docker_image.image != 'amazonlinux:2' && matrix.docker_image.image != 'ubuntu:bionic'
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: git checkout
        if: matrix.docker_image.image == 'amazonlinux:2' || matrix.docker_image.image == 'ubuntu:bionic'
        run: |
          # Perform checkout
          REPO_URL="https://github.com/${{ github.repository }}.git"
          # Clone the repository to the current directory
          git clone --recurse-submodules --depth=1 -b ${{github.sha}} $REPO_URL .
      - name: Setup
        working-directory: .install
        run: |
          echo ::group::Install dependencies
            ./install_script.sh 
          echo ::endgroup::
          echo ::group::Install rust
            ./getrust.sh
          echo ::endgroup::
      - name: Get Redis
        if: matrix.docker_image.image != 'amazonlinux:2' && matrix.docker_image.image != 'ubuntu:bionic'
        uses: actions/checkout@v4
        with:
          repository: redis/redis
          ref: 'unstable' # todo change per version/tag
          path: redis
          submodules: 'recursive'
      - name: Get Redis
        if: matrix.docker_image.image == 'amazonlinux:2' || matrix.docker_image.image == 'ubuntu:bionic'
        run: |
          # Perform checkout
          REPO_URL="https://github.com/redis/redis.git"
          # Clone the repository to the current directory
          git clone --recurse-submodules --depth=1 -b unstable $REPO_URL redis
      - name: build
        uses: ./.github/actions/build-json-module-and-redis-with-cargo
      - name: Set Artifact Names
        # Artifact names have to be unique, so we base them on the environment.
        # We also remove invalid characters from the name.
        id: artifact-names
        run: | # Invalid characters include: Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?
          echo "name=$(echo "${{ matrix.docker_image.image }} x86-64, Redis unstable" | \
            sed -e 's/[":\/\\<>\|*?]/_/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//')" >> $GITHUB_OUTPUT
      - name: Run tests
        run: |
          echo ::group::Activate virtual environment
            python3 -m venv venv
            echo "source $PWD/venv/bin/activate" >> ~/.bash_profile
            source venv/bin/activate
          echo ::endgroup::
          echo ::group::Install python dependencies
            ./.install/common_installations.sh
          echo ::endgroup::
          echo ::group::Unit tests
            cargo test
          echo ::endgroup::
          echo ::group::Flow tests
            MODULE=$(realpath ./target/release/rejson.so) RLTEST_ARGS='--no-progress' ./tests/pytest/tests.sh
          echo ::endgroup::
        env:
          PIP_BREAK_SYSTEM_PACKAGES: 1
      - name: Upload test artifacts
        if: failure() && matrix.docker_image.image != 'amazonlinux:2' && matrix.docker_image.image != 'ubuntu:bionic'
        uses: actions/upload-artifact@v4
        with:
          name: Test logs ${{ steps.artifact-names.outputs.name }}
          path: tests/**/logs/*.log*
          if-no-files-found: ignore
      - name: Pack module
        run: |
          git config --global --add safe.directory /__w/RedisJSON/RedisJSON # to avoid git error
          MODULE=$(realpath ./target/release/rejson.so) ./sbin/pack.sh
      - name: Upload artifacts to S3
        uses: ./.github/actions/upload-artifacts-to-s3-without-make
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github-ref: ${{ github.ref }}
