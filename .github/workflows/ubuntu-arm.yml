name: Build and Test ubuntu ARM instances

on:
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types:
      - opened
      - reopened
      - review_requested
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        required: true
        default: 'unstable'
  workflow_call: # Allows to run this workflow from another workflow
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        type: string
        required: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      TAGGED: ${{ steps.set-env.outputs.TAGGED }}
      TAG: ${{ steps.set-env.outputs.TAG }}
      BRANCH: ${{ steps.set-env.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ steps.set-env.outputs.TAG }}${{ steps.set-env.outputs.BRANCH }}
      redis-ref: ${{ steps.set-env.outputs.redis-ref }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: set env
        id: set-env
        uses: ./.github/actions/setup-env
        with:
          github-ref: ${{ github.ref }}
          redis-ref: ${{ inputs.redis-ref }}

  ubuntu-arm64:
    runs-on: ubuntu24-arm64-4-16 # ubuntu24-arm64-2-8
    needs: setup-environment
    strategy:
      matrix:
        docker:
          - image: "ubuntu:bionic"
            nick: "bionic"
            install_git: |
              apt-get update && apt-get install -y software-properties-common
              add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git
            install_deps: |
              apt update -qq
              apt upgrade -yqq
              apt dist-upgrade -yqq
              apt install -yqq software-properties-common unzip rsync
              add-apt-repository ppa:ubuntu-toolchain-r/test -y
              apt update
              apt install -yqq build-essential wget curl make gcc-10 g++-10 openssl libssl-dev cargo binfmt-support \
                lsb-core awscli libclang-dev clang curl
              update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 --slave /usr/bin/g++ g++ /usr/bin/g++-10
              apt -y install python3.8 python3.8-venv python3.8-dev python3-venv python3-dev python3-pip
              update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2
          - image: "ubuntu:focal"
            nick: focal
            install_git: | 
              apt-get update && apt-get install -y software-properties-common
              add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git
            install_deps: |
              apt update -qq
              apt upgrade -yqq
              apt install -yqq wget make clang-format gcc python3 python3-venv python3-pip lcov git openssl libssl-dev \
                  unzip rsync build-essential gcc-10 g++-10 cargo libclang-dev clang curl
              update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 --slave /usr/bin/g++ g++ /usr/bin/g++-10
          - image: "ubuntu:jammy"
            nick: "jammy"
            install_git: |
              apt-get update && apt-get install -y git
            install_deps: |
              apt update -qq
              apt upgrade -yqq
              apt install -yqq git wget build-essential lcov openssl libssl-dev \
                python3 python3-pip python3-venv python3-dev unzip rsync libclang-dev clang curl
    defaults:
      run:
        shell: bash
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}

      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      ACTIONS_RUNNER_FORCED_INTERNAL_NODE_VERSION: node16
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    container:
      image: ${{ matrix.docker.image }}
    steps:
      - name: Install git
        run: |
          ${{ matrix.docker.install_git }}
      - name: Checkout the module
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install dependencies
        run: |
          ${{ matrix.docker.install_deps }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ needs.setup-environment.outputs.redis-ref }}
          path: 'redis'
      - name: Get Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          rustup update
          rustup update nightly
          rustup component add rust-src --toolchain nightly
      - name: Install python dependencies
        run: |
          echo ::group::activate venv
            python3 -m venv venv
            echo "source $PWD/venv/bin/activate" >> ~/.bash_profile
            source venv/bin/activate
          echo ::endgroup::
          echo ::group::install requirements
            pip install -q --upgrade setuptools
            pip install -q --upgrade pip
            pip install -q -r tests/pytest/requirements.txt
            pip install -q -r .install/build_package_requirements.txt
          echo ::endgroup::
        env:
          PIP_BREAK_SYSTEM_PACKAGES: 1
      - name: build
        uses: ./.github/actions/build-json-module-and-redis-with-cargo
      - name: Test
        run: |
          source venv/bin/activate
          MODULE=$(realpath ./target/release/rejson.so) RLTEST_ARGS='--no-progress' ./tests/pytest/tests.sh
      - name: Pack module
        run: |
          source venv/bin/activate
          git config --global --add safe.directory /__w/RedisJSON/RedisJSON # to avoid git error
          MODULE=$(realpath ./target/release/rejson.so) BRANCH=$TAG_OR_BRANCH \
            SHOW=1 OSNICK=${{ matrix.docker.nick }} ./sbin/pack.sh
      - name: Upload artifacts to S3
        uses: ./.github/actions/upload-artifacts-to-s3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github-ref: ${{ github.ref }}
          osnick: ${{ matrix.docker.nick }}