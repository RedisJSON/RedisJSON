name: Build and Test ubuntu ARM instances

on:
  push:
#    branches:
#      - master
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types:
      - opened
      - reopened
      - review_requested
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        required: true
        default: 'unstable'
  workflow_call: # Allows to run this workflow from another workflow
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        type: string
        required: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      TAGGED: ${{ steps.set-envtagged.outputs.TAGGED }}
      TAG: ${{ steps.set-env.outputs.TAG }}
      BRANCH: ${{ steps.set-env.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ steps.set-env.outputs.TAG }}${{ steps.set-env.outputs.BRANCH }}
      redis-ref: ${{ steps.set-env.outputs.redis-ref }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: set env
        id: set-env
        uses: ./.github/actions/setup-env
        with:
          github-ref: ${{ github.ref }}
          redis-ref: ${{ inputs.redis-ref }}

  ubuntu-arm64:
    runs-on: ubuntu24-arm64-4-16 # ubuntu24-arm64-2-8
    needs: setup-environment
    strategy:
      matrix:
        docker:
          - image: "ubuntu:bionic"
            nick: "bionic"
            prereqs: |
              apt-get update && apt-get install -y software-properties-common
              add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git
            install_deps: ./ubuntu_18.04.sh
          - image: "ubuntu:focal"
            nick: focal
            prereqs: | 
              apt-get update && apt-get install -y software-properties-common
              add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git
            install_deps: ./ubuntu_20.04.sh
          - image: "ubuntu:jammy"
            nick: "jammy"
            prereqs: |
              apt-get update && apt-get install -y git
            install_deps: ./ubuntu_22.04.sh
    defaults:
      run:
        shell: bash
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}

      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      ACTIONS_RUNNER_FORCED_INTERNAL_NODE_VERSION: node16
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    container:
      image: ${{ matrix.docker.image }}
    steps:
      - name: Install git
        shell: sh
        run: |
          ${{ matrix.docker.prereqs }}
      - name: Checkout the module
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install dependencies
        shell: sh
        run: |
          ${{ matrix.docker.install_deps }}
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{needs.setup-environment.outputs.redis-ref}}
          path: 'redis'
      - name: Install python dependencies
        run: |
          echo ::group::install requirements
            pip install -q --upgrade setuptools
            pip install -q --upgrade pip
            pip install -q -r tests/pytest/requirements.txt
            pip install -q -r .install/build_package_requirements.txt
          echo ::endgroup::
        env:
          PIP_BREAK_SYSTEM_PACKAGES: 1
      - name: build
        uses: ./.github/actions/build-json-module-and-redis
#      - name: Test
#        run: |
#          make test
      - name: Pack module
        run: |
          git config --global --add safe.directory /__w/RedisJSON/RedisJSON # to avoid git error
          make pack BRANCH=$TAG_OR_BRANCH SHOW=1 OSNICK=${{ matrix.docker.nick }}
      - name: Upload artifacts to S3
        uses: ./.github/actions/upload-artifacts-to-s3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github-ref: ${{ github.ref }}
          osnick: ${{ matrix.docker.nick }}