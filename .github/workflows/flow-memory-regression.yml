name: Memory Regression Tests

on:
  workflow_call:
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        type: string
        default: 'unstable'
      os:
        description: 'OS to run on (ubuntu-latest, macos-latest)'
        type: string
        default: 'ubuntu-latest'

jobs:
  memory-regression:
    runs-on: ${{ inputs.os }}
    env:
      PIP_BREAK_SYSTEM_PACKAGES: 1
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Get Redis
        uses: actions/checkout@v4
        with:
          repository: redis/redis
          ref: ${{ inputs.redis-ref }}
          path: redis
          submodules: 'recursive'
      
      - name: Build Redis
        run: |
          cd redis
          make -j$(nproc)
          sudo make install
      
      - name: Setup Rust
        run: |
          if [ -f "$HOME/.cargo/env" ]; then
            . "$HOME/.cargo/env"
          fi
          rustc --version
          cargo --version
      
      - name: Build RedisJSON
        run: |
          . "$HOME/.cargo/env"
          cargo build --release
          # Copy librejson.so to rejson.so (expected by tests)
          cp target/release/librejson.so target/release/rejson.so
      
      - name: Setup Python
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools
          pip install redis
          if [ -f tests/pytest/requirements.txt ]; then
            pip install -r tests/pytest/requirements.txt
          fi
      
      - name: Run Memory Regression Tests
        id: memory-test
        run: |
          source venv/bin/activate
          cd tests/pytest
          
          # Run regression tests with budgets (QUICK=1 to only run general variant, PARALLEL=0 to avoid conflicts with output capture)
          QUICK=1 PARALLEL=0 TEST=test_memory_regression.py bash tests.sh ../../target/release/rejson.so || exit 1
          
          echo "‚úÖ Memory regression tests passed - within budgets"
      
      - name: Download Nightly Baseline
        id: download-baseline
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          workflow: event-nightly.yml
          branch: main
          name: memory-report-baseline
          path: baseline/
          if_no_artifact_found: ignore
      
      - name: Run Quick Memory Report
        run: |
          source venv/bin/activate
          cd tests/pytest
          
          # Generate quick report for comparison (PARALLEL=0 to avoid conflicts with output capture)
          QUICK=1 PARALLEL=0 TEST=test_memory_nightly_report.py::test_nightly_memory_report_summary_only \
            bash tests.sh ../../target/release/rejson.so | tee ../../pr_memory_report.txt
      
      - name: Compare with Nightly Baseline
        id: compare
        run: |
          if [ ! -f "pr_memory_report.txt" ]; then
            echo "‚ö†Ô∏è Could not generate memory report" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          CURRENT=$(grep "METRIC:overall_overhead_ratio:" pr_memory_report.txt | cut -d: -f3 || echo "")
          
          if [ -z "$CURRENT" ]; then
            echo "‚ö†Ô∏è Could not extract current memory metrics" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "### üìä Memory Regression Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Comparison vs Nightly Baseline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | This PR | Baseline | Change | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "baseline/memory_report.txt" ]; then
            # Overall metric
            BASELINE=$(grep "METRIC:overall_overhead_ratio:" baseline/memory_report.txt | cut -d: -f3 || echo "")
            if [ -n "$BASELINE" ] && [ -n "$CURRENT" ]; then
              DIFF=$(echo "$CURRENT - $BASELINE" | bc -l)
              PERCENT=$(echo "scale=2; ($DIFF / $BASELINE) * 100" | bc -l)
              if [ $(echo "$PERCENT > 5" | bc -l) -eq 1 ]; then
                STATUS="‚ö†Ô∏è +${PERCENT}%"
              elif [ $(echo "$PERCENT < -5" | bc -l) -eq 1 ]; then
                STATUS="‚úÖ ${PERCENT}%"
              else
                STATUS="‚úÖ Stable"
              fi
              echo "| **Overall Ratio** | ${CURRENT}x | ${BASELINE}x | ${DIFF}x (${PERCENT}%) | ${STATUS} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Small doc metric
            CURRENT_SMALL=$(grep "METRIC:small_doc_overhead:" pr_memory_report.txt | cut -d: -f3 || echo "")
            BASELINE_SMALL=$(grep "METRIC:small_doc_overhead:" baseline/memory_report.txt | cut -d: -f3 || echo "")
            if [ -n "$BASELINE_SMALL" ] && [ -n "$CURRENT_SMALL" ]; then
              DIFF_SMALL=$(echo "$CURRENT_SMALL - $BASELINE_SMALL" | bc -l)
              PERCENT_SMALL=$(echo "scale=2; ($DIFF_SMALL / $BASELINE_SMALL) * 100" | bc -l)
              if [ $(echo "$PERCENT_SMALL > 5" | bc -l) -eq 1 ]; then
                STATUS_SMALL="‚ö†Ô∏è +${PERCENT_SMALL}%"
              elif [ $(echo "$PERCENT_SMALL < -5" | bc -l) -eq 1 ]; then
                STATUS_SMALL="‚úÖ ${PERCENT_SMALL}%"
              else
                STATUS_SMALL="‚úÖ Stable"
              fi
              echo "| Small docs | ${CURRENT_SMALL}x | ${BASELINE_SMALL}x | ${DIFF_SMALL}x (${PERCENT_SMALL}%) | ${STATUS_SMALL} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Large doc metric
            CURRENT_LARGE=$(grep "METRIC:large_doc_overhead:" pr_memory_report.txt | cut -d: -f3 || echo "")
            BASELINE_LARGE=$(grep "METRIC:large_doc_overhead:" baseline/memory_report.txt | cut -d: -f3 || echo "")
            if [ -n "$BASELINE_LARGE" ] && [ -n "$CURRENT_LARGE" ]; then
              DIFF_LARGE=$(echo "$CURRENT_LARGE - $BASELINE_LARGE" | bc -l)
              PERCENT_LARGE=$(echo "scale=2; ($DIFF_LARGE / $BASELINE_LARGE) * 100" | bc -l)
              if [ $(echo "$PERCENT_LARGE > 5" | bc -l) -eq 1 ]; then
                STATUS_LARGE="‚ö†Ô∏è +${PERCENT_LARGE}%"
              elif [ $(echo "$PERCENT_LARGE < -5" | bc -l) -eq 1 ]; then
                STATUS_LARGE="‚úÖ ${PERCENT_LARGE}%"
              else
                STATUS_LARGE="‚úÖ Stable"
              fi
              echo "| Large docs | ${CURRENT_LARGE}x | ${BASELINE_LARGE}x | ${DIFF_LARGE}x (${PERCENT_LARGE}%) | ${STATUS_LARGE} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_Comparison against nightly baseline from main branch_" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Status** | Baseline not available |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è No nightly baseline found. This PR will create the first baseline after merging to main." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Show Summary
        run: |
          echo "‚úÖ Memory regression test completed successfully!"
          echo ""
          echo "üìä Memory Comparison Results:"
          echo ""
          
          if [ -f "pr_memory_report.txt" ]; then
            CURRENT=$(grep "METRIC:overall_overhead_ratio:" pr_memory_report.txt | cut -d: -f3 || echo "")
            if [ -n "$CURRENT" ]; then
              echo "**Current Overall Overhead:** ${CURRENT}x"
              echo ""
            fi
            
            if [ -f "baseline/memory_report.txt" ]; then
              BASELINE=$(grep "METRIC:overall_overhead_ratio:" baseline/memory_report.txt | cut -d: -f3 || echo "")
              if [ -n "$BASELINE" ] && [ -n "$CURRENT" ]; then
                DIFF=$(echo "$CURRENT - $BASELINE" | bc -l)
                PERCENT=$(echo "scale=2; ($DIFF / $BASELINE) * 100" | bc -l)
                echo "**Baseline:** ${BASELINE}x"
                echo "**Change:** ${DIFF}x (${PERCENT}%)"
              fi
            else
              echo "‚ÑπÔ∏è No baseline available. This PR will create the first baseline."
            fi
          fi
      
      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: memory-regression-logs-${{ inputs.os }}-${{ github.sha }}
          path: tests/pytest/logs/*.log*
          if-no-files-found: ignore
          retention-days: 7
