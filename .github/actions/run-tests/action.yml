name: Common Flow for Tests

# Documentation: https://redislabs.atlassian.net/wiki/spaces/DX/pages/3967844669/RediSearch+CI+refactor

inputs:
  env:
    default: "ubuntu-22.04"
    type: string
  container:
    type: string
  san:
    type: string
  test-config:
    description: 'Test configuration environment variable (e.g. "CONFIG=tls" or "QUICK=1")'
    required: true
    type: string

runs:
  using: composite
  defaults:
    shell: bash -l -eo pipefail {0}
  steps:
    - name: Get Installation Mode
      id: mode
      run: |
        [[ -z "${{ inputs.container }}" ]] && echo "mode=sudo" >> $GITHUB_OUTPUT || echo "mode=" >> $GITHUB_OUTPUT
    - name: Check if node20 is Supported
      id: node20
      uses: ./.github/actions/node20-supported
    - name: Deps checkout (node20)
      if: steps.node20.outputs.supported == 'true'
      uses: actions/checkout@v4
      with:
        path: setup
        sparse-checkout-cone-mode: false
        sparse-checkout: |
          .install
          tests/pytests/requirements.*
    - name: Deps checkout (node20 not supported)
      if: steps.node20.outputs.supported == 'false'
      uses: actions/checkout@v3
      with:
        path: setup
        sparse-checkout-cone-mode: false
        sparse-checkout: |
          .install
          tests/pytests/requirements.*
    - name: Setup specific
      working-directory: setup/.install
      run: ./install_script.sh ${{ steps.mode.outputs.mode }}
    - name: Full checkout (node20)
      if: steps.node20.outputs.supported == 'true'
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Full checkout (node20 not supported)
      if: steps.node20.outputs.supported == 'false'
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup common
      run: .install/common_installations.sh ${{ steps.mode.outputs.mode }}

    - name: Get Redis
      uses: actions/checkout@v3
      with:
        repository: redis/redis
        ref: 'unstable' # todo change per version/tag
        path: redis
        submodules: 'recursive'
    - name: build
      uses: ./.github/actions/build-json-module-and-redis-with-cargo

    - name: Set Artifact Names
      # Artifact names have to be unique, so we base them on the environment.
      # We also remove invalid characters from the name.
      id: artifact-names
      run: | # Invalid characters include: Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?
        echo "name=$(echo "${{ inputs.container || inputs.env }} ${{ runner.arch }}, Redis ${{ inputs.get-redis || 'unstable' }}" | \
                      sed -e 's/[":\/\\<>\|*?]/_/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//')" >> $GITHUB_OUTPUT

    - name: Build
      run: make SAN=${{ inputs.san }}
    - name: Unit tests
      id: test1
      continue-on-error: true
      run: make unit-tests LOG=1 CLEAR_LOGS=0 SAN=${{ inputs.san }}
    - name: Flow tests
      id: test2
      continue-on-error: true
      run: make pytest LOG=1 CLEAR_LOGS=0 SAN=${{ inputs.san }} ${{ inputs.test-config }}

    # Using version 4 if node20 is supported, since it is MUCH faster (15m vs 25s)
    - name: Upload Artifacts
      # Upload artifacts only if node20 is supported and tests failed (including sanitizer failures)
      if: >
        steps.node20.outputs.supported == 'true' &&
        (steps.test1.outcome == 'failure' || steps.test2.outcome == 'failure')
      uses: actions/upload-artifact@v4
      with:
        name: Test Logs ${{ steps.artifact-names.outputs.name }}
        path: tests/**/logs/*.log*
        if-no-files-found: ignore
    # If node20 is not supported, we can only use version 3.
    # Here we only upload the artifacts if the tests had failed, since it is very slow
    - name: Upload Artifacts (node20 not supported)
      # Upload artifacts only if tests failed (including sanitizer failures)
      if: >
        steps.node20.outputs.supported == 'false' &&
        (steps.test1.outcome == 'failure' || steps.test2.outcome == 'failure')
      uses: actions/upload-artifact@v3
      with:
        name: Test Logs ${{ steps.artifact-names.outputs.name }}
        path: tests/**/logs/*.log*
        if-no-files-found: ignore

    - name: Fail flow if tests failed
      if: steps.test1.outcome == 'failure' || steps.test2.outcome == 'failure'
      run: exit 1
