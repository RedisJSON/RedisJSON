version: 2.1

parameters:
  run_default_flow:
    default: true
    type: boolean
  run_nightly_twice_a_week_flow_label:
    default: false
    type: boolean

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  early-return-for-forked-pull-requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            if [[ $(uname -s) == Darwin ]]; then rm -f /usr/local/bin/python3; fi
            ./deps/readies/bin/getpy3
      - run:
          name: Setup automation (part 2)
          shell: /bin/bash -l -eo pipefail
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            ./deps/readies/bin/getaws
            ls -l /usr/local/bin/python* || true
            echo "python3: $(command -v python3)"
            python3 --version
            python3 -m pip list
            python3 -m pip install --upgrade setuptools six pip

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "7.2"
      getredis_params:
        type: string
        default: ""
      system_setup_params:
        type: string
        default: ""
    steps:
      - setup-automation
      - run:
          name: System setup
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py <<parameters.system_setup_params>>
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            ./deps/readies/bin/getredis -v '<<parameters.redis_version>>' --force <<parameters.getredis_params>>
      - run:
          name: System report
          shell: /bin/bash -l -eo pipefail
          command: |
            source $HOME/.cargo/env
            make info

  save-tests-logs:
    steps:
      - run:
          name: Cleanup test log dir
          command: |
            rm -f tests/pytest/logs/*.{aof,rdb}
          when: always
      - store_artifacts:
          path: tests/pytest/logs

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - run:
          name: List artifacts
          command: |
            cd bin/artifacts
            du -ah --apparent-size *
      - persist_to_workspace:
          root: bin/
          paths:
            - artifacts/*.zip
            - artifacts/*.tgz
            - artifacts/*.tar
            - artifacts/snapshots/*

  build-steps:
    parameters:
      build_params:
        type: string
        default: ""
      test_params:
        type: string
        default: ""
      redis_version:
        type: string
        default: "7"
      getredis_params:
        type: string
        default: ""
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          redis_version: <<parameters.redis_version>>
          getredis_params: <<parameters.getredis_params>>
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Check formatting
          shell: /bin/bash -l -eo pipefail
          command: make lint
      - run:
          name: Build debug
          shell: /bin/bash -l -eo pipefail
          command: make build DEBUG=1 <<parameters.build_params>>
      - run:
          name: Build release
          shell: /bin/bash -l -eo pipefail
          command: make build pack <<parameters.build_params>>
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"

  test-steps:
    steps:
      - run:
          name: Run tests
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 -m RLTest --version
            make test
          timeout: 30m
          no_output_timeout: 30m
      - save_cache:
          key: v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
      - save-tests-logs

  build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          shell: /bin/bash -l -eo pipefail
          command: |
            ROOT=$PWD
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=1 SHOW=1
            cd $ROOT
            mkdir -p tests/pytest/logs
            tar -C tests/pytest/logs -xzf bin/artifacts/pytest-logs*.tgz
          timeout: 60m
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          shell: /bin/bash -l -eo pipefail
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1
            fi
      - run:
          name: Publish container
          shell: /bin/bash -l -eo pipefail
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=1 SHOW=1
      - persist-artifacts

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - checkout
      - setup-automation
      - run:
          name: Install Docker
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getdocker
      - run:
          name: Build for platform
          command: |
            ROOT=$PWD
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=1 SHOW=1
            cd $ROOT
            mkdir -p tests/pytest/logs
            tar -C tests/pytest/logs -xzf bin/artifacts/pytest-logs*.tgz
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1
            fi
      - run:
          name: Publish container
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=1 SHOW=1
      - persist-artifacts

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-linux-debian:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    parameters:
      redis_version:
        type: string
        default: "7"
      persist:
        type: string
        default: "yes"
    steps:
      - build-steps:
          redis_version: <<parameters.redis_version>>
      - test-steps
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.persist>>" != "yes" ]]; then
              circleci step halt
            fi
      - persist-artifacts

  build-platforms:
    parameters:
      platform:
        type: string
    # docker:
    #   - image: debian:bullseye
    machine:
      enabled: true
      image: ubuntu-2204:edge
      resource_class: large
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  # build-arm-platforms:
  #   parameters:
  #     platform:
  #       type: string
  #   machine:
  #     image: ubuntu-2004:202101-01
  #   resource_class: arm.medium
  #   steps:
  #     - vm-build-platforms-steps:
  #         platform: <<parameters.platform>>

  build-macos-m1:
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.large.gen1
    parameters:
      upload:
        type: string
        default: "yes"
    steps:
      - early-returns
      - build-steps
      - test-steps
      - persist-artifacts
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts SHOW=1 VERBOSE=1
            else
                make upload-release SHOW=1
            fi

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-focal
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build & Test
          shell: /bin/bash -l -eo pipefail
          command: |
            make clang-install
            make coverage SHOW=1
            make upload-cov SHOW=1
          no_output_timeout: 30m
      - save-tests-logs

  sanitize:
    docker:
      - image: redisfab/clang:16-x64-focal
    parameters:
      san-type:
        type: string
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build & test
          shell: /bin/bash -l -eo pipefail
          command: make SAN=<<parameters.san-type>> build test SHOW=1
          no_output_timeout: 30m
      - save-tests-logs

  upload-artifacts:
    parameters:
      staging-lab:
        type: string
        default: "0"
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Upload artifacts to S3
          command: |
            mkdir -p bin
            ln -s ~/workspace/artifacts bin/artifacts
            if [[ -n $CIRCLE_TAG ]]; then
                make upload-release SHOW=1
            else
                make upload-artifacts SHOW=1
            fi

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

always: &always
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/
    tags:
      ignore: /.*/

on-integ-branch-cron: &on-integ-branch-cron
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  default-flow:
    when:
      << pipeline.parameters.run_default_flow >>
    jobs:
      - build-linux-debian:
          name: build
          <<: *not-on-integ-branch
      - build-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [centos7, rocky8, rocky9, bullseye, amzn2]
      - build-macos-m1:
          context: common
          <<: *on-integ-and-version-tags
      - coverage:
          <<: *always
      - sanitize:
          name: sanitize-<< matrix.san-type >>
          <<: *always
          matrix:
            parameters:
              san-type: [address]
      - upload-artifacts:
          name: upload-artifacts-to-staging-lab
          <<: *on-integ-branch
          staging-lab: "1"
          context: common
          requires:
            - build-platforms
            # - build-arm-platforms
            - build-macos-m1
      - upload-artifacts:
          name: upload-release-artifacts
          <<: *on-version-tags
          context: common
          requires:
            - build-platforms
            # - build-arm-platforms
            - build-macos-m1

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          <<: *on-integ-branch-cron
    jobs:
      - build-linux-debian:
          name: build-with-redis-<<matrix.redis_version>>
          matrix:
            parameters:
              redis_version: ["7", "unstable"]

  nightly-twice-a-week-by-param:
    when:
      << pipeline.parameters.run_nightly_twice_a_week_flow_label >>
    jobs:
      - build-macos-m1:
          context: common
          upload: "yes"

  nightly-twice-a-week:
    triggers:
      - schedule:
          cron: "20 17 * * 0,3"
          <<: *on-integ-branch-cron
    jobs:
      - build-macos-m1:
          context: common
          upload: "yes"
